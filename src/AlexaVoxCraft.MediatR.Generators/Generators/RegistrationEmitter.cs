using System.Text;
using AlexaVoxCraft.MediatR.Generators.Models;

namespace AlexaVoxCraft.MediatR.Generators.Generators;

internal static class RegistrationEmitter
{
    public static string EmitServiceRegistrations(RegistrationModel model)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection.Extensions;");
        sb.AppendLine();
        sb.AppendLine("namespace AlexaVoxCraft.MediatR.DI");
        sb.AppendLine("{");
        sb.AppendLine("    internal static partial class AlexaVoxCraftServiceCollection");
        sb.AppendLine("    {");
        sb.AppendLine("        private static partial bool GetIsAvailable() => true;");
        sb.AppendLine();
        sb.AppendLine("        private static partial IServiceCollection AddGeneratedCore(this IServiceCollection services)");
        sb.AppendLine("        {");

        EmitHandlerRegistrations(sb, model);
        EmitBehaviorRegistrations(sb, model);
        EmitExceptionHandlerRegistrations(sb, model);
        EmitInterceptorRegistrations(sb, model);
        EmitPersistenceAdapterRegistration(sb, model);

        sb.AppendLine("            return services;");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }

    private static void EmitHandlerRegistrations(StringBuilder sb, RegistrationModel model)
    {
        if (model.Handlers.Count == 0 && model.DefaultHandler == null)
            return;

        sb.AppendLine();
        sb.AppendLine("            // Request Handlers");

        foreach (var handler in model.Handlers)
        {
            var method = ToLifetimeMethod(handler.Lifetime);
            var typeName = handler.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
            sb.AppendLine($"            services.{method}<AlexaVoxCraft.MediatR.IRequestHandler, {typeName}>();");
        }

        if (model.DefaultHandler != null)
        {
            var typeName = model.DefaultHandler.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
            sb.AppendLine($"            services.TryAddTransient<AlexaVoxCraft.MediatR.IDefaultRequestHandler, {typeName}>();");
        }
    }

    private static void EmitBehaviorRegistrations(StringBuilder sb, RegistrationModel model)
    {
        if (model.Behaviors.Count == 0)
            return;

        sb.AppendLine();
        sb.AppendLine("            // Pipeline Behaviors (ordered by Order property)");

        foreach (var behavior in model.Behaviors)
        {
            var method = ToLifetimeMethod(behavior.Lifetime);
            var typeName = behavior.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
            sb.AppendLine($"            services.{method}<AlexaVoxCraft.MediatR.Pipeline.IPipelineBehavior, {typeName}>(); // Order={behavior.Order}");
        }
    }

    private static void EmitExceptionHandlerRegistrations(StringBuilder sb, RegistrationModel model)
    {
        if (model.ExceptionHandlers.Count == 0)
            return;

        sb.AppendLine();
        sb.AppendLine("            // Exception Handlers");

        foreach (var handler in model.ExceptionHandlers)
        {
            var method = ToLifetimeMethod(handler.Lifetime);
            var typeName = handler.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
            sb.AppendLine($"            services.{method}<AlexaVoxCraft.MediatR.Pipeline.IExceptionHandler, {typeName}>();");
        }
    }

    private static void EmitInterceptorRegistrations(StringBuilder sb, RegistrationModel model)
    {
        if (model.RequestInterceptors.Count == 0 && model.ResponseInterceptors.Count == 0)
            return;

        if (model.RequestInterceptors.Count > 0)
        {
            sb.AppendLine();
            sb.AppendLine("            // Request Interceptors");

            foreach (var interceptor in model.RequestInterceptors)
            {
                var method = ToLifetimeMethod(interceptor.Lifetime);
                var typeName = interceptor.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
                sb.AppendLine($"            services.{method}<AlexaVoxCraft.MediatR.Pipeline.IRequestInterceptor, {typeName}>();");
            }
        }

        if (model.ResponseInterceptors.Count > 0)
        {
            sb.AppendLine();
            sb.AppendLine("            // Response Interceptors");

            foreach (var interceptor in model.ResponseInterceptors)
            {
                var method = ToLifetimeMethod(interceptor.Lifetime);
                var typeName = interceptor.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
                sb.AppendLine($"            services.{method}<AlexaVoxCraft.MediatR.Pipeline.IResponseInterceptor, {typeName}>();");
            }
        }
    }

    private static void EmitPersistenceAdapterRegistration(StringBuilder sb, RegistrationModel model)
    {
        if (model.PersistenceAdapter == null)
            return;

        sb.AppendLine();
        sb.AppendLine("            // Persistence Adapter");

        var typeName = model.PersistenceAdapter.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
        sb.AppendLine($"            services.TryAddSingleton<AlexaVoxCraft.MediatR.Attributes.Persistence.IPersistenceAdapter, {typeName}>();");
    }

    private static string ToLifetimeMethod(int lifetime)
    {
        return lifetime switch
        {
            0 => "AddTransient", // Transient
            1 => "AddScoped",    // Scoped
            2 => "AddSingleton", // Singleton
            _ => "AddTransient"
        };
    }
}