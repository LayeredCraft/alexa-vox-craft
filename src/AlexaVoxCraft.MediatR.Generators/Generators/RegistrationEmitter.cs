using System.Text;
using AlexaVoxCraft.MediatR.Generators.Models;

namespace AlexaVoxCraft.MediatR.Generators.Generators;

internal static class RegistrationEmitter
{
    public static string EmitPartialMethod(PartialClassInfo partialInfo, RegistrationModel model)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using Microsoft.Extensions.Configuration;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection.Extensions;");
        sb.AppendLine();

        if (!string.IsNullOrEmpty(partialInfo.Namespace))
        {
            sb.AppendLine($"namespace {partialInfo.Namespace}");
            sb.AppendLine("{");
        }

        sb.AppendLine($"    public static partial class {partialInfo.ClassName}");
        sb.AppendLine("    {");
        sb.AppendLine($"        public static partial IServiceCollection {partialInfo.MethodName}(");
        sb.AppendLine("            this IServiceCollection services,");
        sb.AppendLine("            Microsoft.Extensions.Configuration.IConfiguration configuration,");
        sb.AppendLine("            System.Action<AlexaVoxCraft.MediatR.DI.SkillServiceConfiguration>? settingsAction = null,");
        sb.AppendLine("            string sectionName = AlexaVoxCraft.MediatR.DI.SkillServiceConfiguration.SectionName)");
        sb.AppendLine("        {");
        sb.AppendLine("            // Configure IOptions<SkillServiceConfiguration>");
        sb.AppendLine("            services.Configure<AlexaVoxCraft.MediatR.DI.SkillServiceConfiguration>(opt =>");
        sb.AppendLine("            {");
        sb.AppendLine("                configuration.GetSection(sectionName).Bind(opt);");
        sb.AppendLine("                settingsAction?.Invoke(opt);");
        sb.AppendLine("            });");
        sb.AppendLine();
        sb.AppendLine("            // Add required AlexaVoxCraft services");
        sb.AppendLine("            AlexaVoxCraft.MediatR.Registration.ServiceRegistrar.AddRequiredServices(services, new AlexaVoxCraft.MediatR.DI.SkillServiceConfiguration());");
        sb.AppendLine();

        EmitHandlerRegistrations(sb, model, "            ");
        EmitBehaviorRegistrations(sb, model, "            ");
        EmitExceptionHandlerRegistrations(sb, model, "            ");
        EmitInterceptorRegistrations(sb, model, "            ");
        EmitPersistenceAdapterRegistration(sb, model, "            ");

        sb.AppendLine("            return services;");
        sb.AppendLine("        }");
        sb.AppendLine("    }");

        if (!string.IsNullOrEmpty(partialInfo.Namespace))
        {
            sb.AppendLine("}");
        }

        return sb.ToString();
    }

    public static string EmitServiceRegistrations(RegistrationModel model)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System.Runtime.CompilerServices;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection.Extensions;");
        sb.AppendLine("using AlexaVoxCraft.MediatR.DI;");
        sb.AppendLine();
        sb.AppendLine("internal static class __AlexaVoxCraft_Generated");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Module initializer runs once when this consumer assembly loads and registers");
        sb.AppendLine("    /// a DI action with AlexaVoxCraftRegistrar. No runtime scanning or reflection needed.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [ModuleInitializer]");
        sb.AppendLine("    internal static void Init()");
        sb.AppendLine("    {");
        sb.AppendLine("        AlexaVoxCraftRegistrar.Register(static services =>");
        sb.AppendLine("        {");

        EmitHandlerRegistrations(sb, model);
        EmitBehaviorRegistrations(sb, model);
        EmitExceptionHandlerRegistrations(sb, model);
        EmitInterceptorRegistrations(sb, model);
        EmitPersistenceAdapterRegistration(sb, model);

        sb.AppendLine("            return services;");
        sb.AppendLine("        });");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }

    private static void EmitHandlerRegistrations(StringBuilder sb, RegistrationModel model, string indent = "            ")
    {
        if (model.Handlers.Count == 0 && model.DefaultHandler == null)
            return;

        sb.AppendLine();
        sb.AppendLine($"{indent}// Request Handlers");

        foreach (var handler in model.Handlers)
        {
            var method = ToLifetimeMethod(handler.Lifetime);
            var typeName = handler.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);

            if (handler.RequestType != null)
            {
                var requestTypeName = handler.RequestType.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
                sb.AppendLine($"{indent}services.{method}<AlexaVoxCraft.MediatR.IRequestHandler<{requestTypeName}>, {typeName}>();");
            }
            else
            {
                sb.AppendLine($"{indent}services.{method}<AlexaVoxCraft.MediatR.IRequestHandler, {typeName}>();");
            }
        }

        if (model.DefaultHandler != null)
        {
            var typeName = model.DefaultHandler.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
            sb.AppendLine($"{indent}services.TryAddTransient<AlexaVoxCraft.MediatR.IDefaultRequestHandler, {typeName}>();");
        }
    }

    private static void EmitBehaviorRegistrations(StringBuilder sb, RegistrationModel model, string indent = "            ")
    {
        if (model.Behaviors.Count == 0)
            return;

        sb.AppendLine();
        sb.AppendLine($"{indent}// Pipeline Behaviors (ordered by Order property)");

        foreach (var behavior in model.Behaviors)
        {
            var method = ToLifetimeMethod(behavior.Lifetime);
            var typeName = behavior.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
            sb.AppendLine($"{indent}services.{method}<AlexaVoxCraft.MediatR.Pipeline.IPipelineBehavior, {typeName}>(); // Order={behavior.Order}");
        }
    }

    private static void EmitExceptionHandlerRegistrations(StringBuilder sb, RegistrationModel model, string indent = "            ")
    {
        if (model.ExceptionHandlers.Count == 0)
            return;

        sb.AppendLine();
        sb.AppendLine($"{indent}// Exception Handlers");

        foreach (var handler in model.ExceptionHandlers)
        {
            var method = ToLifetimeMethod(handler.Lifetime);
            var typeName = handler.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
            sb.AppendLine($"{indent}services.{method}<AlexaVoxCraft.MediatR.Pipeline.IExceptionHandler, {typeName}>();");
        }
    }

    private static void EmitInterceptorRegistrations(StringBuilder sb, RegistrationModel model, string indent = "            ")
    {
        if (model.RequestInterceptors.Count == 0 && model.ResponseInterceptors.Count == 0)
            return;

        if (model.RequestInterceptors.Count > 0)
        {
            sb.AppendLine();
            sb.AppendLine($"{indent}// Request Interceptors");

            foreach (var interceptor in model.RequestInterceptors)
            {
                var method = ToLifetimeMethod(interceptor.Lifetime);
                var typeName = interceptor.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
                sb.AppendLine($"{indent}services.{method}<AlexaVoxCraft.MediatR.Pipeline.IRequestInterceptor, {typeName}>();");
            }
        }

        if (model.ResponseInterceptors.Count > 0)
        {
            sb.AppendLine();
            sb.AppendLine($"{indent}// Response Interceptors");

            foreach (var interceptor in model.ResponseInterceptors)
            {
                var method = ToLifetimeMethod(interceptor.Lifetime);
                var typeName = interceptor.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
                sb.AppendLine($"{indent}services.{method}<AlexaVoxCraft.MediatR.Pipeline.IResponseInterceptor, {typeName}>();");
            }
        }
    }

    private static void EmitPersistenceAdapterRegistration(StringBuilder sb, RegistrationModel model, string indent = "            ")
    {
        if (model.PersistenceAdapter == null)
            return;

        sb.AppendLine();
        sb.AppendLine($"{indent}// Persistence Adapter");

        var typeName = model.PersistenceAdapter.Type.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat);
        sb.AppendLine($"{indent}services.TryAddSingleton<AlexaVoxCraft.MediatR.Attributes.Persistence.IPersistenceAdapter, {typeName}>();");
    }

    private static string ToLifetimeMethod(int lifetime)
    {
        return lifetime switch
        {
            0 => "AddTransient", // Transient
            1 => "AddScoped",    // Scoped
            2 => "AddSingleton", // Singleton
            _ => "AddTransient"
        };
    }
}