//HintName: __AlexaVoxCraft_Interceptors.g.cs
// <auto-generated />
#nullable enable

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    file sealed class InterceptsLocationAttribute : Attribute
    {
        public InterceptsLocationAttribute(int version, string data)
        {
        }
    }
}

namespace AlexaVoxCraft.Generated
{
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;

file static class AlexaVoxCraftInterceptors
{
    [InterceptsLocation(version: 1, data: "tRe2+fyPmU4+lb1FSbVvJJwCAABGdW5jdGlvbi5jcw==")]
    internal static IServiceCollection AddSkillMediator(
        this IServiceCollection services,
        IConfiguration configuration,
        Action<AlexaVoxCraft.MediatR.DI.SkillServiceConfiguration>? settingsAction = null,
        string sectionName = AlexaVoxCraft.MediatR.DI.SkillServiceConfiguration.SectionName)
    {
        // Build effective configuration
        var cfg = new AlexaVoxCraft.MediatR.DI.SkillServiceConfiguration();
        configuration.GetSection(sectionName).Bind(cfg);
        settingsAction?.Invoke(cfg);

        // Register configuration with DI to enable IOptions<SkillServiceConfiguration>
        services.Configure<AlexaVoxCraft.MediatR.DI.SkillServiceConfiguration>(opt =>
        {
            configuration.GetSection(sectionName).Bind(opt);
            settingsAction?.Invoke(opt);
        });

        // Add required core services
        AlexaVoxCraft.MediatR.Registration.ServiceRegistrar.AddRequiredServices(services, cfg);

        // Request Handlers
        services.AddSingleton<AlexaVoxCraft.MediatR.IRequestHandler<AlexaVoxCraft.Model.Request.Type.IntentRequest>, global::Sample.Generated.Function.IntentHandler>();
        services.AddSingleton<AlexaVoxCraft.MediatR.IRequestHandler<AlexaVoxCraft.Model.Request.Type.LaunchRequest>, global::Sample.Generated.Function.LaunchHandler>();

        return services;
    }
}
}
